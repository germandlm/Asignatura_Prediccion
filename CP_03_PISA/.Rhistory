library(here) # Comentar
library(tidyverse)
library(janitor) # Limpiar los nombres
library(skimr) # Summarize bonito
library(magrittr) # Pipe operators
library(corrplot) # Correlaciones
library(ggcorrplot)  # Correlacion
library(PerformanceAnalytics) # Correlaciones
library(leaps) # Seleccion de modelo
raw_data <-  read.csv("pisasci.csv")
raw_data <-  read.csv("pisasci2006.csv")
colnames(raw_data)
raw_data %<>% clean_names()
colnames(raw_data)
skim(raw_data)
# delete duplicate
# Remove duplicate rows of the dataframe
raw_data %<>% distinct(player,.keep_all= TRUE)
# delete NA's
raw_data %<>% drop_na()
# Summarise mas bonito
skim(raw_data)
knitr::opts_chunk$set(echo = TRUE)
raw_data <-  read.csv("pisasci2006.csv")
colnames(raw_data)
raw_data %<>% clean_names()
library(gam)   # Modelo GAM
skim(raw_data)
library(here) # Agilidad en la carga de datos
library(tidyverse)
library(janitor) # Limpiar nombres de variables
library(skimr) # Un summary mas comleto
library(magrittr) # Operadores pipe
library(corrplot) # Correlaciones
library(ggcorrplot)  # Correlaciones
library(splines)  # Para los modelos de splines
library(gam)   # Modelo GAM
raw_data %<>% clean_names()
colnames(raw_data)
skim(raw_data)
raw_data %<>% drop_na()
# Summarise
skim(raw_data)
# Seleccionamos todas las variables menos la categórica "country"
raw_data %>%
select_at(vars(-c("country"))) %>%
# Organizamos el dataset en dos columnas, donde cada valor de cada variable sea una fila diferente
tidyr::gather("id", "value", 2:10) %>%
# Dibujamos un grafico de dispersion para ver la relacion entre cada variable y la nota overall
ggplot(., aes(y = overall, x = value)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "black") +
facet_wrap(~id, ncol = 3, scales = "free_x")
pisa <- raw_data
# Correlaciones
corrplot(cor(pisa %>%
select_at(vars(-country)),
use = "complete.obs"),
method = "circle",type = "upper")
# Otra manera
ggcorrplot(cor(pisa %>%
select_at(vars(-country)),
use = "complete.obs"),
hc.order = TRUE,
type = "lower",  lab = TRUE)
# La funcion smooth.spline utiliza cv para obtener los grados de libertad optimos
fitEdu <- smooth.spline(pisa$edu, pisa$overall)
fitHdi <- smooth.spline(pisa$hdi, pisa$overall)
fitIncome <- smooth.spline(pisa$income, pisa$overall)
fitHealth <- smooth.spline(pisa$health, pisa$overall)
fitSupport <- smooth.spline(pisa$support, pisa$overall)
fitInterest <- smooth.spline(pisa$interest, pisa$overall)
fitIncome$df
gamPisa <- gam(overall ~ s(edu, 3) + s(hdi, 1) + s(health, 1) + s(support, 1) +
s(interest, 4), data = pisa)
par(mfrow=c(2, 3))
plot(gamPisa, se = TRUE)
# delete NA's
raw_data %<>% drop_na()
# Summarise mas bonito
skim(raw_data)
raw_data %>%
select_at(vars(-c("player","nba_country","tm"))) %>%
tidyr::gather("id", "value", 2:25) %>%
ggplot(., aes(y=salary, x=value))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black")+
facet_wrap(~id,ncol=2,scales="free_x")
knitr::opts_chunk$set(echo = TRUE)
library(here) # Agilidad en la carga de datos
library(tidyverse)
library(janitor) # Limpiar nombres de variables
library(skimr) # Un summary mas comleto
library(magrittr) # Operadores pipe
library(corrplot) # Correlaciones
library(ggcorrplot)  # Correlaciones
library(splines)  # Para los modelos de splines
library(gam)   # Modelo GAM
raw_data <-  read.csv("pisasci2006.csv")
colnames(raw_data)
raw_data %<>% clean_names()
colnames(raw_data)
skim(raw_data)
raw_data %<>% drop_na()
# Summarise
skim(raw_data)
# Seleccionamos todas las variables menos la categórica "country"
raw_data %>%
select_at(vars(-c("country"))) %>%
# Organizamos el dataset en dos columnas, donde cada valor de cada variable sea una fila diferente
tidyr::gather("id", "value", 2:10) %>%
# Dibujamos un grafico de dispersion para ver la relacion entre cada variable y la nota overall
ggplot(., aes(y = overall, x = value)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "black") +
facet_wrap(~id, ncol = 3, scales = "free_x")
pisa <- raw_data
# Correlaciones
corrplot(cor(pisa %>%
select_at(vars(-country)),
use = "complete.obs"),
method = "circle",type = "upper")
# Otra manera
ggcorrplot(cor(pisa %>%
select_at(vars(-country)),
use = "complete.obs"),
hc.order = TRUE,
type = "lower",  lab = TRUE)
# La funcion smooth.spline utiliza cv para obtener los grados de libertad optimos
fitEdu <- smooth.spline(pisa$edu, pisa$overall)
fitHdi <- smooth.spline(pisa$hdi, pisa$overall)
fitIncome <- smooth.spline(pisa$income, pisa$overall)
fitHealth <- smooth.spline(pisa$health, pisa$overall)
fitSupport <- smooth.spline(pisa$support, pisa$overall)
fitInterest <- smooth.spline(pisa$interest, pisa$overall)
fitIncome$df
View(gamPisa)
fitIncome$df
knitr::opts_chunk$set(echo = TRUE)
library(here) # Agilidad en la carga de datos
library(tidyverse)
library(janitor) # Limpiar nombres de variables
library(skimr) # Un summary mas comleto
library(magrittr) # Operadores pipe
library(corrplot) # Correlaciones
library(ggcorrplot)  # Correlaciones
library(splines)  # Para los modelos de splines
library(gam)   # Modelo GAM
raw_data <-  read.csv("pisasci2006.csv")
gamPisa <- gam(overall ~ s(edu, 3) + s(hdi, 1) + s(health, 1) + s(support, 1) +
s(interest, 4), data = pisa)
par(mfrow=c(2, 3))
plot(gamPisa, se = TRUE)
