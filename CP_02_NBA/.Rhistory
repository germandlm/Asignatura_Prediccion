library(here) # Comentar
library(tidyverse)
library(janitor) # Limpiar los nombres
library(skimr) # Summarize bonito
library(magrittr) # Pipe operators
library(corrplot) # Correlaciones
library(ggcorrplot)  # Correlacion
library(PerformanceAnalytics) # Correlaciones
library(leaps) # Seleccion de modelo
raw_data <-  read.csv("nba.csv")
raw_data <-  read.csv("nba.csv")
raw_data <-  read.csv("nba.csv")
library(here) # Comentar
library(tidyverse)
library(janitor) # Limpiar los nombres
library(skimr) # Summarize bonito
library(magrittr) # Pipe operators
library(corrplot) # Correlaciones
library(ggcorrplot)  # Correlacion
library(PerformanceAnalytics) # Correlaciones
library(leaps) # Seleccion de modelo
raw_data <-  read.csv("nba.csv")
raw_data <-  read.csv("nba.csv")
raw_data <-  read.csv("nba.csv")
library(here) # Comentar
library(tidyverse)
library(janitor) # Limpiar los nombres
library(skimr) # Summarize bonito
library(magrittr) # Pipe operators
library(corrplot) # Correlaciones
library(ggcorrplot)  # Correlacion
library(PerformanceAnalytics) # Correlaciones
library(leaps) # Seleccion de modelo
library(here) # Comentar
library(tidyverse)
library(janitor) # Limpiar los nombres
library(skimr) # Summarize bonito
library(magrittr) # Pipe operators
library(corrplot) # Correlaciones
library(ggcorrplot)  # Correlacion
library(PerformanceAnalytics) # Correlaciones
library(leaps) # Seleccion de modelo
raw_data <-  read.csv("nba.csv")
colnames(raw_data)
library(here) # Comentar
library(tidyverse)
library(janitor) # Limpiar los nombres
library(skimr) # Summarize bonito
library(magrittr) # Pipe operators
library(corrplot) # Correlaciones
library(ggcorrplot)  # Correlacion
library(PerformanceAnalytics) # Correlaciones
library(leaps) # Seleccion de modelo
raw_data <-  read.csv("nba.csv")
colnames(raw_data)
raw_data %<>% clean_names()
colnames(raw_data)
skim(raw_data)
# delete duplicate
# Remove duplicate rows of the dataframe
raw_data %<>% distinct(player,.keep_all= TRUE)
# delete NA's
raw_data %<>% drop_na()
# Summarise
skim(raw_data)
raw_data %>%
select_at(vars(-c("player","nba_country","tm"))) %>%
tidyr::gather("id", "value", 2:25) %>%
ggplot(., aes(y=salary, x=value))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black")+
facet_wrap(~id,ncol=2,scales="free_x")
raw_data %>%
select_at(vars(-c("player","nba_country","tm"))) %>%
tidyr::gather("id", "value", 2:25) %>%
ggplot(., aes(y=log(salary), x=value))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black")+
facet_wrap(~id,ncol=2,scales="free_x")
log_data <- raw_data %>% mutate(salary=log(salary))
skim(log_data)
# Excluded vars (factor)
vars <- c("player","nba_country","tm")
# Correlations
corrplot(cor(log_data %>%
select_at(vars(-vars)),
use = "complete.obs"),
method = "circle",type = "upper")
# Other Correlations
ggcorrplot(cor(log_data %>%
select_at(vars(-vars)),
use = "complete.obs"),
hc.order = TRUE,
type = "lower",  lab = TRUE)
# Other Correlations
chart.Correlation(log_data %>%
select_at(vars(-vars)),
histogram=TRUE, pch=19)
model_vif <- lm(salary~.-player-nba_country-tm, data=log_data)
vif_values <- car::vif(model_vif)
#create horizontal bar chart to display each VIF value
barplot(vif_values, main = "VIF Values", horiz = TRUE, col = "steelblue")
#add vertical line at 5
abline(v = 5, lwd = 3, lty = 2)
knitr::kable(vif_values)
model_vif <- lm(salary~.-player-nba_country-tm, data=log_data)
vif_values <- car::vif(model_vif)
#create horizontal bar chart to display each VIF value
barplot(vif_values, main = "VIF Values", horiz = TRUE, col = "steelblue")
#add vertical line at 5
abline(v = 5, lwd = 3, lty = 2)
knitr::kable(vif_values)
raw_data %>%
select_at(vars(-c("player","nba_country","tm"))) %>%
tidyr::gather("id", "value", 2:25) %>%
ggplot(., aes(y=log(salary), x=value))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black")+
facet_wrap(~id,ncol=2,scales="free_x")
raw_data %>%
select_at(vars(-c("player","nba_country","tm"))) %>%
tidyr::gather("id", "value", 2:25) %>%
raw_data %>%
select_at(vars(-c("player","nba_country","tm"))) %>%
tidyr::gather("id", "value", 2:25)
raw_data %>%
select_at(vars(-c("player","nba_country","tm"))) %>%
tidyr::gather("id", "value", 2:25) %>%
ggplot(., aes(y=log(salary), x=value))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black")+
facet_wrap(~id,ncol=2,scales="free_x")
raw_data %>%
select_at(vars(-c("player","nba_country","tm"))) %>%
tidyr::gather("id", "value", 2:25)
raw_data %>%
select_at(vars(-c("player","nba_country","tm"))) %>%
tidyr::gather("id", "value", 2:25)
raw_data %>%
select_at(vars(-c("player","nba_country","tm"))) %>%
tidyr::gather("id", "value", 2:25)
log_data <- raw_data %>% mutate(salary=log(salary))
skim(log_data)
# Excluded vars (factor)
vars <- c("player","nba_country","tm")
# Correlations
corrplot(cor(log_data %>%
select_at(vars(-vars)),
use = "complete.obs"),
method = "circle",type = "upper")
# Other Correlations
ggcorrplot(cor(log_data %>%
select_at(vars(-vars)),
use = "complete.obs"),
hc.order = TRUE,
type = "lower",  lab = TRUE)
raw_data %>%
select_at(vars(-c("player","nba_country","tm"))) %>%
tidyr::gather("id", "value", 2:25)
raw_data %>%
select_at(vars(-c("player","nba_country","tm"))) %>%
tidyr::gather("id", "value", 2:25)
library(rsample)  # data splitting
install.packages("rsample")
install.packages("glmnet")
library(rsample)  # data splitting
library(glmnet)   # implementing regularized regression approaches
library(dplyr)    # basic data manipulation procedures
library(rsample)  # data splitting
library(glmnet)   # implementing regularized regression approaches
library(dplyr)    # basic data manipulation procedures
set.seed(1234)
nba_split <- initial_split(log_data, prop = .7, strata = "Salary")
set.seed(1234)
nba_split <- initial_split(log_data, prop = .7, strata = "salary")
nba_train <- training(nba_split)
nba_test  <- testing(nba_split)
set.seed(1234)
nba_split <- initial_split(log_data, prop = .7, strata = "salary")
nba_train <- training(nba_split)
nba_test  <- testing(nba_split)
nba_train_x <- model.matrix(Salary ~ ., nba_train)[, -1]
nba_train_x <- model.matrix(salary ~ ., nba_train)[, -1]
nba_train_y <- log(nba_train$salary)
nba_test_x <- model.matrix(salary ~ ., nba_test)[, -1]
nba_test_y <- log(nba_test$salary)
dim(nba_train_x)
fold_id <- sample(1:10, size = length(nba_train_y), replace=TRUE)
tuning_grid <- tibble::tibble(
alpha      = seq(0, 1, by = .1),
mse_min    = NA,
mse_1se    = NA,
lambda_min = NA,
lambda_1se = NA
)
tuning_grid
for (i in seq_along(tuning_grid$alpha)) {
fit <- cv.glmnet(nba_train_x, nba_train_y, alpha = tuning_grid$alpha[i], foldid = fold_id)
tuning_grid$mse_min[i]    <- fit$cvm[fit$lambda == fit$lambda.min]
tuning_grid$mse_1se[i]    <- fit$cvm[fit$lambda == fit$lambda.1se]
tuning_grid$lambda_min[i] <- fit$lambda.min
tuning_grid$lambda_1se[i] <- fit$lambda.1se
}
tuning_grid
tuning_grid %>%
mutate(se = mse_1se - mse_min) %>%
ggplot(aes(alpha, mse_min)) +
geom_line(size = 2) +
geom_ribbon(aes(ymax = mse_min + se, ymin = mse_min - se), alpha = .25) +
ggtitle("MSE ± one standard error")
cv_net   <- cv.glmnet(nba_train_x, nba_train_y, alpha = 0.2)
min(cv_net$cvm)
pred <- predict(cv_net, s = cv_net$lambda.min, nba_test_x)
cv_net   <- cv.glmnet(nba_train_x, nba_train_y, alpha = 0.2)
min(cv_net$cvm)
tuning_grid %>%
mutate(se = mse_1se - mse_min) %>%
ggplot(aes(alpha, mse_min)) +
geom_line(size = 2) +
geom_ribbon(aes(ymax = mse_min + se, ymin = mse_min - se), alpha = .25) +
ggtitle("MSE ± one standard error")
cv_net   <- cv.glmnet(nba_train_x, nba_train_y, alpha = 0.75)
min(cv_net$cvm)
cv_net   <- cv.glmnet(nba_train_x, nba_train_y, alpha = 0.2)
min(cv_net$cvm)
pred <- predict(nba_lasso, s = nba_lasso$lambda.min, nba_test_x)
cv_lasso  <- cv.glmnet(nba_train_x, nba_train_y, alpha = 0.2)
min(cv_lasso$cvm)
pred <- predict(nba_lasso, s = nba_lasso$lambda.min, nba_test_x)
cv_lasso   <- cv.glmnet(nba_train_x, nba_train_y, alpha = 1.0)
min(cv_lasso$cvm)
pred <- predict(cv_lasso, s = nba_lasso$lambda.min, nba_test_x)
pred <- predict(cv_lasso, s = cv_lasso$lambda.min, nba_test_x)
View(cv_lasso)
nba_train_x <- model.matrix(salary ~ ., nba_train)[, -1]
nba_train_y <- log(nba_train$salary)
nba_test_x <- model.matrix(salary ~ ., nba_test)[, -1]
nba_test_y <- log(nba_test$salary)
dim(nba_train_x)
View(cv_lasso)
View(cv_lasso)
set.seed(123)
nba_split <- initial_split(log_data, prop = .7, strata = "salary")
nba_train <- training(nba_split)
nba_test  <- testing(nba_split)
nba_train_x <- model.matrix(salary ~ ., nba_train)[, -1]
nba_train_y <- log(nba_train$salary)
nba_test_x <- model.matrix(salary ~ ., nba_test)[, -1]
nba_test_y <- log(nba_test$salary)
dim(nba_train_x)
fold_id <- sample(1:10, size = length(nba_train_y), replace=TRUE)
tuning_grid <- tibble::tibble(
alpha      = seq(0, 1, by = .1),
mse_min    = NA,
mse_1se    = NA,
lambda_min = NA,
lambda_1se = NA
)
tuning_grid
for (i in seq_along(tuning_grid$alpha)) {
fit <- cv.glmnet(nba_train_x, nba_train_y, alpha = tuning_grid$alpha[i], foldid = fold_id)
tuning_grid$mse_min[i]    <- fit$cvm[fit$lambda == fit$lambda.min]
tuning_grid$mse_1se[i]    <- fit$cvm[fit$lambda == fit$lambda.1se]
tuning_grid$lambda_min[i] <- fit$lambda.min
tuning_grid$lambda_1se[i] <- fit$lambda.1se
}
tuning_grid
tuning_grid %>%
mutate(se = mse_1se - mse_min) %>%
ggplot(aes(alpha, mse_min)) +
geom_line(size = 2) +
geom_ribbon(aes(ymax = mse_min + se, ymin = mse_min - se), alpha = .25) +
ggtitle("MSE ± one standard error")
cv_lasso   <- cv.glmnet(nba_train_x, nba_train_y, alpha = 1.0)
min(cv_lasso$cvm)
pred <- predict(cv_lasso, s = cv_lasso$lambda.min, nba_test_x)
pred <- predict(cv_lasso, s = cv_lasso$lambda.min, nba_test_x)
View(fit)
nba_train_x <- model.matrix(salary ~ ., nba_train)[, -1]
nba_train_y <- log(nba_train$salary)
nba_test_x <- model.matrix(salary ~ ., nba_test)[, -1]
nba_test_y <- log(nba_test$salary)
dim(nba_train_x)
dim(nba_test_x)
